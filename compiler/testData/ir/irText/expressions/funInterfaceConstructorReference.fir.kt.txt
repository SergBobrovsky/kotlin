typealias KR = KRunnable
typealias KSS = KSupplier<String>
typealias KCS = KConsumer<String>
fun interface KRunnable {
  abstract fun run()

}

fun interface KSupplier<T : Any?> {
  abstract fun get(): T

}

fun interface KConsumer<T : Any?> {
  abstract fun accept(x: T)

}

fun test1(): KFunction1<Function0<Unit>, KRunnable> {
  return ::KRunnable
}

fun test1a(): KFunction1<Function0<Unit>, KRunnable> {
  return ::KRunnable
}

fun test1b(): KFunction<Runnable> {
  return ::Runnable
}

fun test2(): Function1<Function0<String>, KSupplier<String>> {
  return ::KSupplier/*<String>()*/
}

fun test2a(): Function1<Function0<String>, KSupplier<String>> {
  return ::KSupplier/*<String>()*/
}

fun test3(): Function1<Function1<String, Unit>, KConsumer<String>> {
  return ::KConsumer/*<String>()*/
}

fun test3a(): Function1<Function1<String, Unit>, KConsumer<String>> {
  return ::KConsumer/*<String>()*/
}
